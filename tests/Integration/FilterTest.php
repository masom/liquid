<?php


namespace Liquid\Tests\Integration;


use Liquid\Context;
use Liquid\StandardFilters;
use Liquid\Strainer;
use Liquid\Tests\Lib\CanadianMoneyFilter;
use Liquid\Tests\Lib\MoneyFilter;
use Liquid\Variable;


class FilterTest extends \Liquid\Tests\IntegrationTestCase {
    /** @var Context */
    protected $context;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->context = new Context();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        unset($this->context);
    }

    public function test_local_filter() {
        $this->context['var'] = 1000;
        $this->context->add_filters(new MoneyFilter());

        $variable = new Variable("var | money");
        $this->assertEquals(' 1000$ ', $variable->render($this->context));
    }

    public function test_underscore_in_filter_name(){
        $this->context['var'] = 1000;
        $this->context->add_filters(new MoneyFilter());
        $variable = new Variable("var | money_with_underscore");
        $this->assertEquals( ' 1000$ ', $variable->render($this->context));
    }

    public function test_second_filter_overwrites_first() {
        $this->context['var'] = 1000;
        $this->context->add_filters(new MoneyFilter());
        $this->context->add_filters(new CanadianMoneyFilter());

        $variable = new Variable("var | money");
        $this->assertEquals( ' 1000$ CAD ', $variable->render($this->context));
    }

    public function test_size() {
        $this->context['var'] = 'abcd';
        $this->context->add_filters(new MoneyFilter());

        $variable = new Variable("var | size");
        $this->assertEquals( 4, $variable->render($this->context));
    }

    public function test_join() {
        $this->context['var'] = array(1,2,3,4);

        $variable = new Variable("var | join");
        $this->assertEquals("1 2 3 4", $variable->render($this->context));
    }
}
