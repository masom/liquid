<?php


namespace Liquid\Tests\Integration;


use Liquid\Context;
use Liquid\StandardFilters;
use Liquid\Strainer;
use Liquid\Tests\Lib\CanadianMoneyFilter;
use Liquid\Tests\Lib\MoneyFilter;
use Liquid\Tests\Lib\SubstituteFilter;
use Liquid\Variable;


class FilterTest extends \Liquid\Tests\IntegrationTestCase {
    /** @var Context */
    protected $context;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->context = new Context();
    }

    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        unset($this->context);
    }

    public function test_local_filter() {
        $this->context['var'] = 1000;
        $this->context->add_filters(new MoneyFilter());

        $variable = new Variable("var | money");
        $this->assertEquals(' 1000$ ', $variable->render($this->context));
    }

    public function test_underscore_in_filter_name(){
        $this->context['var'] = 1000;
        $this->context->add_filters(new MoneyFilter());
        $variable = new Variable("var | money_with_underscore");
        $this->assertEquals( ' 1000$ ', $variable->render($this->context));
    }

    public function test_second_filter_overwrites_first() {
        $this->context['var'] = 1000;
        $this->context->add_filters(new MoneyFilter());
        $this->context->add_filters(new CanadianMoneyFilter());

        $variable = new Variable("var | money");
        $this->assertEquals( ' 1000$ CAD ', $variable->render($this->context));
    }

    public function test_size() {
        $this->context['var'] = 'abcd';
        $this->context->add_filters(new MoneyFilter());

        $variable = new Variable("var | size");
        $this->assertEquals( 4, $variable->render($this->context));
    }

    public function test_join() {
        $this->context['var'] = array(1,2,3,4);

        $variable = new Variable("var | join");
        $this->assertEquals("1 2 3 4", $variable->render($this->context));
    }

    public function test_sort() {
        $this->context['value'] = 3;
        $this->context['numbers'] = array(2,1,4,3);
        $this->context['words'] = array('expected', 'as', 'alphabetic');
        $this->context['arrays'] = array('flower', 'are');

        $variable =  new Variable("numbers | sort");
        $this->assertEquals(array(1,2,3,4), $variable->render($this->context));

        $variable = new Variable("words | sort");
        $this->assertEquals(array('alphabetic', 'as', 'expected'), $variable->render($this->context));

        $variable = new Variable("value | sort");
        $this->assertEquals(array(3), $variable->render($this->context));

        $variable = new Variable("arrays | sort");
        $this->assertEquals(array('are', 'flower'), $variable->render($this->context));
    }

    public function test_strip_html() {
        $this->context['var'] = "<b>bla blub</a>";

        $variable = new Variable("var | strip_html");
        $this->assertEquals( "bla blub", $variable->render($this->context));
    }
    public function test_strip_html_ignore_comments_with_html(){
        $this->context['var'] = "<!-- split and some <ul> tag --><b>bla blub</a>";

        $variable = new Variable("var | strip_html");
        $this->assertEquals( "bla blub", $variable->render($this->context));
    }

    public function test_capitalize() {
        $this->context['var'] = "blub";

        $variable = new Variable("var | capitalize");
        $this->assertEquals( "Blub", $variable->render($this->context));
    }

    public function test_nonexistent_filter_is_ignored() {
        $this->context['var'] = 1000;

        $variable = new Variable("var | xyzzy");
        $this->assertEquals( 1000, $variable->render($this->context));
    }

    public function test_filter_with_keyword_arguments() {
        $this->context['surname'] = 'john';
        $this->context->add_filters(new SubstituteFilter());

        $variable = new Variable(" 'hello %{first_name}, %{last_name}' | substitute: first_name: surname, last_name: 'doe' ");
        $output = $variable->render($this->context);
        $this->assertEquals( 'hello john, doe', $output);
    }
}
